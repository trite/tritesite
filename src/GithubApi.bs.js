// Generated by Melange
'use strict';

var Curry = require("melange/lib/js/curry.js");
var Relude_String = require("relude/./src/Relude_String.bs.js");
var Base64$Tritesite = require("./Base64.bs.js");
var Decode_AsResult_OfParseError = require("bs-decode/./src/Decode_AsResult_OfParseError.bs.js");

function githubApiResponseToString(param) {
  var match = param._links;
  return "\n  name:            " + param.name + "\n  path:            " + param.path + "\n  sha:             " + param.sha + "\n  size:            " + param.size + "\n  url:             " + param.url + "\n  html_url:        " + param.html_url + "\n  git_url:         " + param.git_url + "\n  download_url:    " + param.download_url + "\n  type:            " + param.type_ + "\n  content:         " + param.content + "\n  content_decode:  " + param.content_decoded + "\n  encoding:        " + param.encoding + "\n  ----links----\n    self: " + match.self + "\n    git:  " + match.git + "\n    html: " + match.html + "\n";
}

function linksMake(self, git, html) {
  return {
          self: self,
          git: git,
          html: html
        };
}

function githubApiMake(name, path, sha, size, url, html_url, git_url, download_url, type_, content, encoding, _links) {
  return {
          name: name,
          path: path,
          sha: sha,
          size: size,
          url: url,
          html_url: html_url,
          git_url: git_url,
          download_url: download_url,
          type_: type_,
          content: Relude_String.replaceEach("\n", "", content),
          content_decoded: Base64$Tritesite.decode(content),
          encoding: encoding,
          _links: _links
        };
}

function decodeLinks(json) {
  return Curry._2(Decode_AsResult_OfParseError.Pipeline.run, json, Curry._3(Decode_AsResult_OfParseError.Pipeline.field, "html", Decode_AsResult_OfParseError.Pipeline.string, Curry._3(Decode_AsResult_OfParseError.Pipeline.field, "git", Decode_AsResult_OfParseError.Pipeline.string, Curry._3(Decode_AsResult_OfParseError.Pipeline.field, "self", Decode_AsResult_OfParseError.Pipeline.string, Curry._1(Decode_AsResult_OfParseError.Pipeline.succeed, linksMake)))));
}

function decodeTest(json) {
  return Curry._2(Decode_AsResult_OfParseError.Pipeline.run, json, Curry._3(Decode_AsResult_OfParseError.Pipeline.field, "_links", decodeLinks, Curry._3(Decode_AsResult_OfParseError.Pipeline.field, "encoding", Decode_AsResult_OfParseError.Pipeline.string, Curry._3(Decode_AsResult_OfParseError.Pipeline.field, "content", Decode_AsResult_OfParseError.Pipeline.string, Curry._3(Decode_AsResult_OfParseError.Pipeline.field, "type", Decode_AsResult_OfParseError.Pipeline.string, Curry._3(Decode_AsResult_OfParseError.Pipeline.field, "download_url", Decode_AsResult_OfParseError.Pipeline.string, Curry._3(Decode_AsResult_OfParseError.Pipeline.field, "git_url", Decode_AsResult_OfParseError.Pipeline.string, Curry._3(Decode_AsResult_OfParseError.Pipeline.field, "html_url", Decode_AsResult_OfParseError.Pipeline.string, Curry._3(Decode_AsResult_OfParseError.Pipeline.field, "url", Decode_AsResult_OfParseError.Pipeline.string, Curry._3(Decode_AsResult_OfParseError.Pipeline.field, "size", Decode_AsResult_OfParseError.Pipeline.intFromNumber, Curry._3(Decode_AsResult_OfParseError.Pipeline.field, "sha", Decode_AsResult_OfParseError.Pipeline.string, Curry._3(Decode_AsResult_OfParseError.Pipeline.field, "path", Decode_AsResult_OfParseError.Pipeline.string, Curry._3(Decode_AsResult_OfParseError.Pipeline.field, "name", Decode_AsResult_OfParseError.Pipeline.string, Curry._1(Decode_AsResult_OfParseError.Pipeline.succeed, githubApiMake))))))))))))));
}

exports.githubApiResponseToString = githubApiResponseToString;
exports.linksMake = linksMake;
exports.githubApiMake = githubApiMake;
exports.decodeLinks = decodeLinks;
exports.decodeTest = decodeTest;
/* Relude_String Not a pure module */
