// Generated by Melange
'use strict';

var Css = require("bs-css-emotion/./src/Css.bs.js");
var Curry = require("melange/lib/js/curry.js");
var React = require("react");
var Marked = require("marked");
var Relude_IO = require("relude/./src/Relude_IO.bs.js");
var Dompurify = require("dompurify");
var ReactDom = require("react-dom");
var ReludeFetch = require("relude-fetch/./src/ReludeFetch.bs.js");
var Relude_List = require("relude/./src/Relude_List.bs.js");
var Relude_Result = require("relude/./src/Relude_Result.bs.js");
var Relude_Globals = require("relude/./src/Relude_Globals.bs.js");
var Decode_ParseError = require("bs-decode/./src/Decode_ParseError.bs.js");
var ReasonReactRouter = require("reason-react/./src/ReasonReactRouter.bs.js");
var ReludeFetch_Error = require("relude-fetch/./src/ReludeFetch_Error.bs.js");
var GithubApi$Tritesite = require("./GithubApi.bs.js");
var ReludeFetch_Response = require("relude-fetch/./src/ReludeFetch_Response.bs.js");

var contentRoot = "https://api.github.com/repos/trite/trite.io-content/contents/";

function makeUri(path) {
  return contentRoot + path;
}

function show(error) {
  return ReludeFetch_Error.show((function (a) {
                return a;
              }), error);
}

var Type = {};

var $$Error = {
  show: show,
  Type: Type
};

var IOE = Relude_IO.WithError(Type);

function fetchString(uri) {
  return Curry._2(IOE.Infix.$great$great$eq, ReludeFetch.$$fetch(uri), ReludeFetch_Response.text);
}

var ContentFetch = {
  $$Error: $$Error,
  IOE: IOE,
  fetchString: fetchString
};

function Blog$S(Props) {
  return Props.children;
}

var S = {
  make: Blog$S
};

var wideTextInput = Curry._1(Css.style, {
      hd: Css.width(Css.pct(50.0)),
      tl: /* [] */0
    });

var wideTextArea = Curry._1(Css.style, {
      hd: Css.width(Css.pct(50.0)),
      tl: {
        hd: Css.height(Css.px(150)),
        tl: /* [] */0
      }
    });

var Styles = {
  wideTextInput: wideTextInput,
  wideTextArea: wideTextArea
};

function getValue(e) {
  return e.target.value;
}

function parseAndSet(setter, $$event) {
  var x = Dompurify.sanitize(Marked.parse($$event.target.value));
  return Curry._1(setter, (function (param) {
                return x;
              }));
}

function foldUnitResults(param) {
  return Relude_Result.fold((function (param) {
                
              }), (function (param) {
                
              }), param);
}

function $$fetch(setter, uri, _event) {
  Relude_IO.unsafeRunAsync(foldUnitResults, Curry._2(Relude_IO.mapError, (function (error) {
              Curry._1(setter, (function (param) {
                      return ReludeFetch_Error.show((function (a) {
                                    return a;
                                  }), error);
                    }));
            }), Relude_IO.map((function (content) {
                  Curry._1(setter, (function (param) {
                          return content;
                        }));
                }), fetchString(uri))));
}

function doSpecificFetch(specificFetch, setSpecificFetchResult, _event) {
  Relude_IO.unsafeRunAsync(foldUnitResults, Curry._2(Relude_IO.mapError, (function (error) {
              Curry._1(setSpecificFetchResult, (function (param) {
                      return ReludeFetch_Error.show((function (a) {
                                    return a;
                                  }), error);
                    }));
            }), Relude_IO.map((function (param) {
                  return Relude_Globals.$great$great((function (param) {
                                return Relude_Globals.$great$great((function (prim) {
                                              return JSON.parse(prim);
                                            }), GithubApi$Tritesite.decodeTest, param);
                              }), (function (param) {
                                return Relude_Result.fold((function (err) {
                                              Curry._1(setSpecificFetchResult, (function (param) {
                                                      return Decode_ParseError.failureToDebugString(err);
                                                    }));
                                            }), (function (param) {
                                              return Relude_Globals.$great$great(GithubApi$Tritesite.githubApiResponseToString, (function (x) {
                                                            Curry._1(setSpecificFetchResult, (function (param) {
                                                                    return x;
                                                                  }));
                                                          }), param);
                                            }), param);
                              }), param);
                }), fetchString(contentRoot + specificFetch))));
}

function Blog$App(Props) {
  var url = ReasonReactRouter.useUrl(undefined, undefined);
  return React.createElement("div", undefined, React.createElement("span", undefined, React.createElement(Blog$S, {
                      children: Curry._2(Relude_List.$$String.joinWith, ", ", url.path)
                    })), React.createElement("br", undefined), React.createElement("hr", undefined), React.createElement("br", undefined), React.createElement("span", undefined, React.createElement(Blog$S, {
                      children: "some text and stuff"
                    })));
}

var App = {
  getValue: getValue,
  parseAndSet: parseAndSet,
  foldUnitResults: foldUnitResults,
  $$fetch: $$fetch,
  doSpecificFetch: doSpecificFetch,
  make: Blog$App
};

var root = document.querySelector("#root");

if (root == null) {
  console.error("Failed to start React: couldn't find the #root element");
} else {
  ReactDom.render(React.createElement(Blog$App, {}), root);
}

exports.contentRoot = contentRoot;
exports.makeUri = makeUri;
exports.ContentFetch = ContentFetch;
exports.S = S;
exports.Styles = Styles;
exports.App = App;
/* IOE Not a pure module */
